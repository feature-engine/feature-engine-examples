{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Drop Features with High PSI Value\n",
    "\n",
    "The **DropHighPSIFeatures** selects features based on the Population Stability Index (PSI). The higher this value, the more unstable a feature. Unstable in this case means that there is a significant change in the distribution of the feature in the groups being compared.\n",
    "\n",
    "To determine the PSI of a feature, the DropHighPSIFeatures takes a dataframe and splits it in 2 based on a reference variable indicated by the user. This reference variable can be numerical, categorical or date. If the variable is numerical, the split ensures a certain proportion of observations in each sub-dataframe. If the variable is categorical, we can split the data based on the categories. And if the variable is a date, we can split the data based on dates.\n",
    "\n",
    "**In this notebook, we showcase many possible ways in which the DropHighPSIFeatures can be used to select features based on their PSI value.**\n",
    "\n",
    "### Dataset\n",
    "\n",
    "We use the Credit Approval data set from the UCI Machine Learning Repository.\n",
    "\n",
    "To download the Credit Approval dataset from the UCI Machine Learning Repository visit [this website](http://archive.ics.uci.edu/ml/machine-learning-databases/credit-screening/) and click on crx.data to download data. Save crx.data to the parent folder of this notebook folder.\n",
    "\n",
    "**Citation:**\n",
    "\n",
    "Dua, D. and Graff, C. (2019). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n",
    "\n",
    "# Data preparation\n",
    "\n",
    "We will edit some of the original variables and add some additional features to simulate different scenarios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from feature_engine.selection import DropHighPSIFeatures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A1</th>\n",
       "      <th>A2</th>\n",
       "      <th>A3</th>\n",
       "      <th>A4</th>\n",
       "      <th>A5</th>\n",
       "      <th>A6</th>\n",
       "      <th>A7</th>\n",
       "      <th>A8</th>\n",
       "      <th>A9</th>\n",
       "      <th>A10</th>\n",
       "      <th>A11</th>\n",
       "      <th>A12</th>\n",
       "      <th>A13</th>\n",
       "      <th>A14</th>\n",
       "      <th>A15</th>\n",
       "      <th>A16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b</td>\n",
       "      <td>30.83</td>\n",
       "      <td>0.000</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>1.25</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>202.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a</td>\n",
       "      <td>58.67</td>\n",
       "      <td>4.460</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>q</td>\n",
       "      <td>h</td>\n",
       "      <td>3.04</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>6</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>43.0</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a</td>\n",
       "      <td>24.50</td>\n",
       "      <td>0.500</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>q</td>\n",
       "      <td>h</td>\n",
       "      <td>1.50</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>280.0</td>\n",
       "      <td>824</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b</td>\n",
       "      <td>27.83</td>\n",
       "      <td>1.540</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>3.75</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>g</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b</td>\n",
       "      <td>20.17</td>\n",
       "      <td>5.625</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>1.71</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  A1     A2     A3 A4 A5 A6 A7    A8 A9 A10  A11 A12 A13    A14  A15  A16\n",
       "0  b  30.83  0.000  u  g  w  v  1.25  t   t    1   f   g  202.0    0    1\n",
       "1  a  58.67  4.460  u  g  q  h  3.04  t   t    6   f   g   43.0  560    1\n",
       "2  a  24.50  0.500  u  g  q  h  1.50  t   f    0   f   g  280.0  824    1\n",
       "3  b  27.83  1.540  u  g  w  v  3.75  t   t    5   t   g  100.0    3    1\n",
       "4  b  20.17  5.625  u  g  w  v  1.71  t   f    0   f   s  120.0    0    1"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load data\n",
    "data = pd.read_csv('../crx.data', header=None)\n",
    "\n",
    "# add variable names according to UCI Machine Learning\n",
    "# Repo information\n",
    "data.columns = ['A'+str(s) for s in range(1,17)]\n",
    "\n",
    "# replace ? by np.nan\n",
    "data = data.replace('?', np.nan)\n",
    "\n",
    "# re-cast some variables to the correct types \n",
    "data['A2'] = data['A2'].astype('float')\n",
    "data['A14'] = data['A14'].astype('float')\n",
    "\n",
    "# encode target as binary\n",
    "data['A16'] = data['A16'].map({'+':1, '-':0})\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Edit and add features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# simulate customers from different portfolios.\n",
    "data['A13'] = data['A13'].map({'g':'portfolio_1', 's':'portfolio_2', 'q':'portfolio_3'})\n",
    "data['A13'].fillna('Unknown', inplace=True)\n",
    "\n",
    "# simulate customers from different channels\n",
    "data['A12'] = data['A12'].map({'f':'wholesale', 't':'retail'})\n",
    "data['A12'].fillna('Missing', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# simulate customers from different age groups\n",
    "\n",
    "data['A6'].fillna('Missing', inplace=True)\n",
    "\n",
    "labels = {\n",
    "'w': '20-25',\n",
    "'q': '25-30',\n",
    "'m': '30-35',\n",
    "'r': '35-40',\n",
    "'cc': '40-45',\n",
    "'k': '45-50',\n",
    "'c': '50-55',\n",
    "'d': '55-60',\n",
    "'x': '60-65',\n",
    "'i': '65-70',\n",
    "'e': '70-75',\n",
    "'aa': '75-80',\n",
    "'ff': '85-90',\n",
    "'j': 'Unknown',\n",
    "'Missing': 'Missing',\n",
    "}\n",
    "    \n",
    "data['A6'] = data['A6'].map(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A1</th>\n",
       "      <th>A2</th>\n",
       "      <th>A3</th>\n",
       "      <th>A4</th>\n",
       "      <th>A5</th>\n",
       "      <th>A6</th>\n",
       "      <th>A7</th>\n",
       "      <th>A8</th>\n",
       "      <th>A9</th>\n",
       "      <th>A10</th>\n",
       "      <th>A11</th>\n",
       "      <th>A12</th>\n",
       "      <th>A13</th>\n",
       "      <th>A14</th>\n",
       "      <th>A15</th>\n",
       "      <th>A16</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b</td>\n",
       "      <td>30.83</td>\n",
       "      <td>0.000</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>20-25</td>\n",
       "      <td>v</td>\n",
       "      <td>1.25</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>wholesale</td>\n",
       "      <td>portfolio_1</td>\n",
       "      <td>202.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a</td>\n",
       "      <td>58.67</td>\n",
       "      <td>4.460</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>25-30</td>\n",
       "      <td>h</td>\n",
       "      <td>3.04</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>6</td>\n",
       "      <td>wholesale</td>\n",
       "      <td>portfolio_1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-01-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a</td>\n",
       "      <td>24.50</td>\n",
       "      <td>0.500</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>25-30</td>\n",
       "      <td>h</td>\n",
       "      <td>1.50</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>wholesale</td>\n",
       "      <td>portfolio_1</td>\n",
       "      <td>280.0</td>\n",
       "      <td>824</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-01-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b</td>\n",
       "      <td>27.83</td>\n",
       "      <td>1.540</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>20-25</td>\n",
       "      <td>v</td>\n",
       "      <td>3.75</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>retail</td>\n",
       "      <td>portfolio_1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b</td>\n",
       "      <td>20.17</td>\n",
       "      <td>5.625</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>20-25</td>\n",
       "      <td>v</td>\n",
       "      <td>1.71</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>wholesale</td>\n",
       "      <td>portfolio_2</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-01-05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  A1     A2     A3 A4 A5     A6 A7    A8 A9 A10  A11        A12          A13  \\\n",
       "0  b  30.83  0.000  u  g  20-25  v  1.25  t   t    1  wholesale  portfolio_1   \n",
       "1  a  58.67  4.460  u  g  25-30  h  3.04  t   t    6  wholesale  portfolio_1   \n",
       "2  a  24.50  0.500  u  g  25-30  h  1.50  t   f    0  wholesale  portfolio_1   \n",
       "3  b  27.83  1.540  u  g  20-25  v  3.75  t   t    5     retail  portfolio_1   \n",
       "4  b  20.17  5.625  u  g  20-25  v  1.71  t   f    0  wholesale  portfolio_2   \n",
       "\n",
       "     A14  A15  A16       date  \n",
       "0  202.0    0    1 2018-01-01  \n",
       "1   43.0  560    1 2018-01-02  \n",
       "2  280.0  824    1 2018-01-03  \n",
       "3  100.0    3    1 2018-01-04  \n",
       "4  120.0    0    1 2018-01-05  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add a datetime variable\n",
    "\n",
    "data['date'] = pd.date_range(start='1/1/2018', periods=len(data))\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Analysis\n",
    "\n",
    "We will plot the distributions of numerical and categorical variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A1', 'A4', 'A5', 'A6', 'A7', 'A9', 'A10', 'A12', 'A13']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# categorical variables\n",
    "\n",
    "vars_cat = data.select_dtypes(include='O').columns.to_list()\n",
    "\n",
    "vars_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEFCAYAAADuT+DpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAASt0lEQVR4nO3df5BdZ33f8fcH+RdJMCbx0qaSbCmJEqoJ+UE3gk5p+ZF4Kg9BcsAQmaE2lETJpKKkJEzFtHU7askEMiGDQQ0ojQklcRTFGWAJwipD+FEa7GoNLonkiGyEjVdTYmGMDWnAyHz7xz1KbtZXu2clnXu9e96vmTu6z3Oee+53ZyR99pznnOekqpAk9dcTJl2AJGmyDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkM5Sko8meTDJxUN9z0vykSQPJblnguVJrRkE0llIsgH4p0AB24Y2/RVwM/C6CZQlnRWDQDo71wO3A78F3HC6s6r+d1W9Gzg+obqkZbtg0gVIK9T1wJuBO4Dbk/y9qvrLCdcknRWPCKRlSvJs4ErgQFXdCfwF8LLJViWdPYNAWr4bgP9RVV9s2rcwdHpIWmk8NSQtQ5InAi8F1iT5QtN9MXBZkh+sqv8zueqks+MRgbQ81wCPApuBH2pe/xD4n8D1SZ6Q5BLgQiBJLkly0WRKldrxiEBanhuAd1bV54c7k7wNuAn4IPChoU1/DXwMeO64CpSWKz6YRpL6zVNDktRzBoEk9ZxBIEk9ZxBIUs8ZBJLUcyvu8tHLL7+8NmzYMOkyJGlFufPOO79YVVOjtq24INiwYQOzs7OTLkOSVpQk955pm6eGJKnnDAJJ6rlOgyDJ1iTHkswl2T1i+68luat5fTbJl7usR5L0WJ3NESRZA+wFrgLmgcNJZqrq6OkxVfVvhsa/GvjhruqRJI3W5RHBFmCuqo5X1SPAfmD7IuOvA363w3okSSN0GQRrgfuG2vNN32MkuRLYCPxRh/VIkkZ4vEwW7wBurapHR21MsjPJbJLZkydPjrk0SVrdugyCE8D6ofa6pm+UHSxyWqiq9lXVdFVNT02NvB9CknSWuryh7DCwKclGBgGwgxEP+E7yNOApwCc7rGXsNuz+wKRLWFXu+eUXTLoEadXq7Iigqk4Bu4BDwN3Agao6kmRPkm1DQ3cA+8sn5EjSRHS6xERVHQQOLui7cUH7P3VZgyRpcY+XyWJJ0oQYBJLUcwaBJPWcQSBJPWcQSFLPGQSS1HMGgST1nEEgST1nEEhSzxkEktRzBoEk9ZxBIEk9ZxBIUs8ZBJLUcwaBJPWcQSBJPWcQSFLPGQSS1HMGgST1nEEgST1nEEhSz3UaBEm2JjmWZC7J7jOMeWmSo0mOJLmly3okSY91QVc7TrIG2AtcBcwDh5PMVNXRoTGbgNcD/6SqHkzy1K7qkSSN1uURwRZgrqqOV9UjwH5g+4IxPw3sraoHAarq/g7rkSSN0GUQrAXuG2rPN33Dvhf43iT/K8ntSbZ2WI8kaYTOTg0t4/s3Ac8F1gEfT/L0qvry8KAkO4GdAFdcccWYS5Sk1a3LI4ITwPqh9rqmb9g8MFNV36iqzwGfZRAMf0dV7auq6aqanpqa6qxgSeqjLoPgMLApycYkFwE7gJkFY97L4GiAJJczOFV0vMOaJEkLdBYEVXUK2AUcAu4GDlTVkSR7kmxrhh0CHkhyFPgI8LqqeqCrmiRJj9XpHEFVHQQOLui7ceh9Aa9tXpKkCfDOYknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeq5ToMgydYkx5LMJdk9YvsrkpxMclfz+qku65EkPdYFXe04yRpgL3AVMA8cTjJTVUcXDP29qtrVVR2SpMV1eUSwBZirquNV9QiwH9je4fdJks5Cl0GwFrhvqD3f9C304iSfSXJrkvUd1iNJGmHSk8XvBzZU1Q8AHwLeNWpQkp1JZpPMnjx5cqwFStJq12UQnACGf8Nf1/T9jap6oKq+3jT/G/CPRu2oqvZV1XRVTU9NTXVSrCT1VZdBcBjYlGRjkouAHcDM8IAk3znU3Abc3WE9kqQRlnXVUJInAN9WVQ8vNbaqTiXZBRwC1gA3V9WRJHuA2aqaAf51km3AKeBLwCuW+wNIks7NkkGQ5BbgZ4FHGfyWf2mSt1TVryz12ao6CBxc0Hfj0PvXA69fbtGSpPOnzamhzc0RwDXAB4GNwL/osihJ0vi0CYILk1zIIAhmquobQHValSRpbNoEwTuAe4BvBT6e5EpgyTkCSdLKsOQcQVXdBNw01HVvkud1V5IkaZzaTBZfDLwY2LBg/J6OapIkjVGby0ffBzwE3Al8fYmxkqQVpk0QrKuqrZ1XIkmaiDaTxX+c5OmdVyJJmog2RwTPBl6R5HMMTg0FqGahOEnSCtcmCK7uvApJ0sQseWqoqu4FLgNe2Lwua/okSavAkkGQ5DXA7wBPbV6/neTVXRcmSRqPNqeGXgU8s6r+CiDJG4FPAm/tsjBJ0ni0uWooDFYePe3Rpk+StAq0OSJ4J3BHkvc07WuA3+ysIknSWLVZa+jNST7K4DJSgFdW1ac7rUqSNDZnDIIkl1bVw0m+ncHqo/cMbfv2qvpS9+VJkrq22BHBLcCPM1hjaPj5A2na39VhXZKkMTljEFTVjzd/bhxfOZKkcWtzH8GH2/RJklamxeYILgG+Bbg8yVP420tGLwXWjqE2SdIYLHZE8DMM5gee1vx5+vU+4G1tdp5ka5JjSeaS7F5k3IuTVJLp9qVLks6HxeYI3gK8Jcmrq2rZdxEnWQPsBa4C5oHDSWaq6uiCcU8CXgPcsdzvkCSduzb3Ebw1yfcDm4FLhvr/+xIf3QLMVdVxgCT7ge3A0QXj/jPwRuB1y6hbknSetJks/o8M1hV6K/A84E3Athb7XgvcN9SeZ8HcQpJnAOur6gNtC5YknV9t1hq6FvhR4AtV9UrgB4Enn+sXJ3kC8GbgF1qM3ZlkNsnsyZMnz/WrJUlD2gTBX1fVN4FTSS4F7gfWt/jciQXj1jV9pz0J+H7go0nuAZ4FzIyaMK6qfVU1XVXTU1NTLb5aktRWm0XnZpNcBvwGg6uGvspgGeqlHAY2JdnIIAB2AC87vbGqHgIuP91u1jP6xaqabVu8JOnctZks/rnm7duT3AZcWlWfafG5U0l2AYeANcDNVXUkyR5gtqpmzqVwSdL5sWQQJJkB9gPvq6p7lrPzqjoIHFzQd+MZxj53OfuWJJ0fbeYIfpXBEtRHk9ya5NrmrmNJ0irQ5tTQx4CPNTeIPR/4aeBmBktNSJJWuDaTxSR5IvBC4CeBZwDv6rIoSdL4tJkjOMDgLuHbGKwx9LHmclJJ0iqwaBA0N33dBVxXVY8uNlaStDItOlnc/Ob/EkNAklavNlcNfbhZJjpLD5UkrTRtguBngN8HHknycJKvJHm447okSWPS5vLRJ42jEEnSZLRZhjpJXp7kPzTt9Um2dF+aJGkc2pwa+q/AP+ZvF4z7KoMnj0mSVoE2N5Q9s6qekeTTAFX1YJKLOq5LkjQmbY4IvtEsL1EASaYAbyiTpFWiTRDcBLwHeGqSNwCfAH6p06okSWPT5qqh30lyJ4PHVQa4pqru7rwySdJYtLlq6LuBz1XVXuBPgauaJ5ZJklaBNqeG/gB4NMn3AO9g8BziWzqtSpI0Nm2C4JtVdQp4EfC2qnod8J3dliVJGpe2Vw1dB1wP/GHTd2F3JUmSxqlNELySwQ1lb6iqzyXZCLy727IkSeOyZBBU1VHgF4EjSZ4OnKiqN3ZemSRpLNpcNfQC4C8Y3E/wNmAuydVtdp5ka5JjSeaS7B6x/WeT/EmSu5J8Isnm5f4AkqRz02aJiV8FnldVc/A3l5N+APjgYh9q7kbeC1wFzAOHk8w0Rxin3VJVb2/GbwPeDGxd9k8hqbUNuz8w6RJWlXt++QWTLuGctZkj+MrpEGgcB77S4nNbgLmqOl5VjwD7ge3DA6pq+LkG30qzjIUkaXzOeESQ5EXN29kkB4EDDP6jfglwuMW+1wL3DbXngWeO+J5/BbwWuAh4fruyJUnny2JHBC9sXpcAfwk8B3gucLLpOy+qam9VfTfwb4F/P2pMkp1JZpPMnjx58nx9tSSJRY4IquqV57jvEwzuQj5tXdN3JvuBXz9DLfuAfQDT09OePpKk86jNVUPrkrwnyf3N6w+SrGux78PApiQbm+cX7ABmFux701DzBcCfL6d4SdK5azNZ/E4G/4H/g+b1/qZvUc2yFLuAQ8DdwIGqOpJkT3OFEMCuJEeS3MVgnuCG5f8IkqRz0eby0amqGv6P/7eS/HybnVfVQeDggr4bh96/ps1+JEndaXNE8EDz8Po1zevlwANdFyZJGo82QfAvgZcCXwD+L3Atg/WHJEmrQJsnlN0LbFtqnCRpZWpzRCBJWsUMAknqOYNAknqudRAkeVaS25J8NMk1HdYkSRqjxRad+/tV9YWhrtcCPwEEuAN4b7elSZLGYbGrht6e5FPAm6rqa8CXGVw6+k3g4UU+J0laQc54aqiqrgE+DfxhkuuBnwcuBr4DuGYMtUmSxmDROYKqej/wz4EnA+8BPltVN1WVa0FL0ipxxiBIsi3JR4DbgD8FfhLYnmR/87hKSdIqsNgcwX9h8LjJJwKHqmoL8AvN0tFvYLCstCRphVssCB4CXgR8C3D/6c6q+nMMAUlaNRabI/gJBhPDFwAvG085kqRxW+xRlV8E3jrGWiRJE+ASE5LUcwaBJPWcQSBJPWcQSFLPGQSS1HOdBkGSrUmOJZlLsnvE9tcmOZrkM0k+nOTKLuuRJD1WZ0GQZA2wF7ga2Axcl2TzgmGfBqar6geAW4E3dVWPJGm0Lo8ItgBzVXW8qh4B9gPbhwdU1Ueq6v81zduBdR3WI0kaocsgWAvcN9Seb/rO5FXABzusR5I0wmJrDY1NkpcD08BzzrB9J7AT4IorrhhjZZK0+nV5RHACWD/UXtf0/R1Jfgz4d8C2qvr6qB1V1b6qmq6q6ampqU6KlaS+6jIIDgObkmxMchGDFUtnhgck+WHgHQxC4P4R+5AkdayzIKiqU8Au4BBwN3Cgqo4k2ZNkWzPsV4BvA34/yV1JZs6wO0lSRzqdI6iqg8DBBX03Dr3/sS6/X5K0NO8slqSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ7rNAiSbE1yLMlckt0jtv+zJJ9KcirJtV3WIkkarbMgSLIG2AtcDWwGrkuyecGwzwOvAG7pqg5J0uIu6HDfW4C5qjoOkGQ/sB04enpAVd3TbPtmh3VIkhbR5amhtcB9Q+35pk+S9DiyIiaLk+xMMptk9uTJk5MuR5JWlS6D4ASwfqi9rulbtqraV1XTVTU9NTV1XoqTJA10GQSHgU1JNia5CNgBzHT4fZKks9BZEFTVKWAXcAi4GzhQVUeS7EmyDSDJjySZB14CvCPJka7qkSSN1uVVQ1TVQeDggr4bh94fZnDKSJI0IStisliS1B2DQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknquU6DIMnWJMeSzCXZPWL7xUl+r9l+R5INXdYjSXqszoIgyRpgL3A1sBm4LsnmBcNeBTxYVd8D/Brwxq7qkSSN1uURwRZgrqqOV9UjwH5g+4Ix24F3Ne9vBX40STqsSZK0QJdBsBa4b6g93/SNHFNVp4CHgO/osCZJ0gIXTLqANpLsBHY2za8mOTbJelaZy4EvTrqIpcSThn3k383z68ozbegyCE4A64fa65q+UWPmk1wAPBl4YOGOqmofsK+jOnstyWxVTU+6Dmkh/26OT5enhg4Dm5JsTHIRsAOYWTBmBriheX8t8EdVVR3WJElaoLMjgqo6lWQXcAhYA9xcVUeS7AFmq2oG+E3g3UnmgC8xCAtJ0hjFX8D7LcnO5tSb9Lji383xMQgkqedcYkKSes4gkKSeWxH3Eej8SnIJ8HPAs4ECPgH8elV9baKFSUCSpwCbgEtO91XVxydX0ernHEEPJTkAfAX47abrZcBlVfWSyVUlQZKfAl7D4L6ju4BnAZ+squdPsq7VziDooSRHq2rzUn3SuCX5E+BHgNur6oeSPA34pap60YRLW9WcI+inTyV51ulGkmcCsxOsRzrta6dPUSa5uKr+DPi+Cde06jlH0CPNb1sFXAj8cZLPN+0rgT+bZG1SYz7JZcB7gQ8leRC4d6IV9YCnhnokyRkXnQKoKv/B6XEjyXMYrD92W7OUvTpiEEhSzzlHIEk9ZxBIUs8ZBJLUcwaBJPWcQSBJPff/Aaqv0BIReV32AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAELCAYAAADURYGZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAAU5klEQVR4nO3df7BdZX3v8ffHRFApP+olqCVAoo2dyQi19jS0I23trUzDoAEFEahFuNZ4q7F0bJ2GuffSO9zrXH+MzIjSamzBn1wKONRYgrTj9QdqpQlKgYSLjSFImFICoqBzFYLf+8de0Z3jyTnrhLP2zsl6v2b2nP08+zlrffNjn8/Z61nrWakqJEn99bRxFyBJGi+DQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwikfZTkC0keSXLwUN+NSb4/9Hg8yR3jrFOaiUEg7YMkS4DfBApYtbu/qk6pqp/b/QC+Clw7niqlduKVxdLsJbkY+D3gFuCFVfWKKcYsAb4FvKCqto+0QGkWFo67AGmeOg+4lEEQfC3Jc6rq36cYc7MhoP2dh4akWUpyEnAccE1V3crgt/5zpxh6HvCREZYm7RODQJq91wP/UFUPNe2rmr6faMLiucB1I65NmjXnCKRZSPJM4AFgAfD9pvtg4AjgxVX1L824DwMHV9V546hTmg3nCKTZOR14EjgeeHyo/xoGh4L+tAmLs4BXjbw6aR94aEiandcDV1bVt6vqgd0P4APA7ydZyCAsvgt8fnxlSu15aEiSes5PBJLUcwaBJPWcQSBJPWcQSFLPGQSS1HPz7jqCI488spYsWTLuMiRpXrn11lsfqqpFU70274JgyZIlbNq0adxlSNK8kuTevb3W6aGhJCuT3J1ka5K1exlzVpItSTYnuarLeiRJP6uzTwRJFgCXAycDO4CNSdZX1ZahMcuAi4CXVtUjSY7qqh5J0tS6/ESwAthaVduq6nHgauC0SWPeCFxeVY8AVNWDHdYjSZpCl0FwNHDfUHtH0zfshcALk3wlydeSrJxqQ0lWJ9mUZNPOnTs7KleS+mncp48uBJYBLwPOAT6c5IjJg6pqXVVNVNXEokVTTnpLkvZRl0FwP3DMUHtx0zdsB7C+qp6oqnuAbzIIBknSiHQZBBuBZUmWJjkIOBtYP2nM3zH4NECSIxkcKtrWYU2SpEk6C4Kq2gWsAW4C7mJwf9fNSS5JsqoZdhPwcJItDNZuf3tVPdxVTZKknzXv7kcwMTFRM11QtmTtDXO2v+3vPHXOtiVJ45Lk1qqamOq1cU8WS5LGzCCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ7rNAiSrExyd5KtSdZO8fr5SXYmua15/GGX9UiSftbCrjacZAFwOXAysAPYmGR9VW2ZNPRvq2pNV3VIkqbX5SeCFcDWqtpWVY8DVwOndbg/SdI+6DIIjgbuG2rvaPomOyPJ7UmuS3LMVBtKsjrJpiSbdu7c2UWtktRb454s/gywpKpOAP4R+OhUg6pqXVVNVNXEokWLRlqgJB3ougyC+4Hh3/AXN30/UVUPV9WPmuZfA7/aYT2SpCl0GQQbgWVJliY5CDgbWD88IMnzhpqrgLs6rEeSNIXOzhqqql1J1gA3AQuAK6pqc5JLgE1VtR744ySrgF3Ad4Dzu6pHkjS1zoIAoKo2ABsm9V089Pwi4KIua5AkTW/ck8WSpDEzCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ6bVRAkeVqSw7oqRpI0ejMGQZKrkhyW5BDgTmBLkre32XiSlUnuTrI1ydppxp2RpJJMtC9dkjQX2nwiWF5VjwKnAzcCS4E/mOmbkiwALgdOAZYD5yRZPsW4Q4ELgVvaly1JmittguDpSZ7OIAjWV9UTQLX4vhXA1qraVlWPA1cDp00x7n8A7wJ+2K5kSdJcahMEHwK2A4cAX0pyHPBoi+87GrhvqL2j6fuJJC8BjqmqG1pVK0macwtnGlBVlwGXDXXdm+R3nuqOkzwNuBQ4v8XY1cBqgGOPPfap7lqSNGTGIEhyMHAGsGTS+Etm+Nb7gWOG2oubvt0OBV4EfCEJwHOB9UlWVdWm4Q1V1TpgHcDExESbw1KSpJZmDALg08D3gFuBH81i2xuBZUmWMgiAs4Fzd79YVd8DjtzdTvIF4M8mh4AkqVttgmBxVa2c7YaraleSNcBNwALgiqranOQSYFNVrZ/tNiVJc69NEHw1yfFVdcdsN15VG4ANk/ou3svYl812+5Kkp65NEJwEnJ/kHgaHhgJUVZ3QaWWSpJFoEwSndF6FJGlsZryOoKruBY4AXtk8jmj6JEkHgDZrDV0IfBI4qnl8Islbuy5MkjQabQ4NvQE4sap+AJDkXcA/Ae/vsjBJ0mi0WWIiwJND7SebPknSAaDNJ4IrgVuSXN+0Twf+prOKJEkj1WatoUubq35ParouqKpvdFqVJGlk9hoESQ6rqkeTPJvB6qPbh157dlV9p/vyJEldm+4TwVXAKxisMTS80Fua9vM7rEuSNCJ7DYKqekXzdenoypEkjVqb6wg+16ZPkjQ/TTdH8AzgWcCRSX6en54yehiT7jQmSZq/ppsjeBPwJ8AvMJgn2B0EjwIf6LYsSdKoTDdH8D7gfUneWlVeRSxJB6g21xG8P8mLgOXAM4b6P9ZlYZKk0Whzz+K/AF7GIAg2MFiW+suAQSBJB4A2aw2dCfwu8EBVXQD8MnB4p1VJkkamTRD8v6r6MbAryWHAg8Ax3ZYlSRqVNovObUpyBPBhBmcPfZ/BMtSSpANAm8niNzdPP5jks8BhVXV7t2VJkkalzZXF65Ocm+SQqtpuCEjSgaXNHMF7GSxBvSXJdUnObK46liQdANocGvoi8MUkC4D/CLwRuILBUhOSpHmuzWQxSZ4JvBJ4LfAS4KNdFiVJGp02F5RdA6wAPstgjaEvNqeTSpIOANMGQZKnAbcB51TVk9ONlSTNT9NOFje/+b9mX0MgycokdyfZmmTtFK//5yR3JLktyZeTLN+X/UiS9l2bs4Y+l+SMJJl56E81k8uXM1ibaDlwzhQ/6K+qquOr6sXAu4FLZ7MPSdJT1yYI3gRcCzye5NEkjyV5tMX3rQC2VtW2qnocuBo4bXhAVQ1v5xD2vDeyJGkE2pw+eug+bvto4L6h9g7gxMmDkrwFeBtwEIPTU39GktXAaoBjjz12H8uRJE2lzZXFSfK6JP+taR+TZMVcFVBVl1fVC4A/B/7rXsasq6qJqppYtGjRXO1akkS7Q0N/CfwGcG7T/j6DY/8zuZ89Vyld3PTtzdXA6S22K0maQ22C4MSqegvwQ4CqeoTBYZyZbASWJVma5CDgbGD98IAky4aapwL/2qpqSdKcaXNl8RPNGUAFkGQRMOMFZVW1K8ka4CZgAXBFVW1OcgmwqarWA2uSvBx4AngEeP0+/jkkSfuoTRBcBlwPHJXkHQzuWDblsfzJqmoDg9tbDvddPPT8wvalSpK60OasoU8muZXB7SoDnF5Vd3VemSRpJNqcNfQC4J6quhy4Ezi5uWOZJOkA0Gay+FPAk0l+EfgQgzOBruq0KknSyLQJgh9X1S7g1cAHqurtwPO6LUuSNCptguCJJOcA5wF/3/Q9vbuSJEmj1CYILmBwQdk7quqeJEuBj3dbliRpVGYMgqraAvwZsDnJ8cD9VfWuziuTJI1EmzuUnQp8EPgWg9NHlyZ5U1Xd2HVxkqTutbmg7L3A71TVVvjJ6aQ3AAaBJB0A2swRPLY7BBrbgMc6qkeSNGJ7/USQ5NXN001JNgDXMFhv6DUMFpSTJB0Apjs09Mqh5/8O/HbzfCfwjM4qkiSN1F6DoKouGGUhkqTxaLPW0OIk1yd5sHl8KsniURQnSepem8niKxncUOYXmsdnmj5J0gGgTRAsqqorq2pX8/gI4I2DJekA0SYIHm5uXr+gebwOeLjrwiRJo9EmCP4TcBbwAPBvDO5Q5kSyJB0g2tyh7F5g1QhqkSSNQZtPBJKkA5hBIEk9ZxBIUs+1DoIkv57ks0m+kOT0DmuSJI3QdIvOPbeqHhjqehvwKgb3JLgF+LtuS5MkjcJ0Zw19MMnXgXdX1Q+B7zI4dfTHwKMjqE2SNAJ7PTRUVacD3wD+Psl5wJ8ABwP/ATh9BLVJkkZg2jmCqvoM8HvA4cD1wDer6rKq2tlm40lWJrk7ydYka6d4/W1JtiS5Pcnnkhy3L38ISdK+22sQJFmV5PPAZ4E7gdcCpyW5urld5bSSLAAuB04BlgPnJFk+adg3gImqOgG4Dnj3vv0xJEn7aro5gv8JrACeCdxUVSuAP02yDHgHcPYM214BbK2qbQBJrgZOA7bsHlBVnx8a/zXgdbP+E8wjS9beMCfb2f7OU+dkO5IE0wfB94BXA88CHtzdWVX/yswhAHA0cN9Qewdw4jTj3wDcONULSVYDqwGOPfbYFruWJLU13RzBqxhMDC8Ezu2yiGZF0wngPVO9XlXrqmqiqiYWLXIFbEmaS9PdqvIh4P1PYdv3A8cMtRc3fXtI8nLgvwC/XVU/egr7kyTtgy6XmNgILEuyNMlBDA4nrR8ekORXgA8Bq6rqwSm2IUnqWGdBUFW7gDXATcBdwDVVtTnJJUl2L2v9HuDngGuT3JZk/V42J0nqyIz3I3gqqmoDsGFS38VDz1/e5f4lSTNz9VFJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6rtMgSLIyyd1JtiZZO8Xrv5Xk60l2JTmzy1okSVPrLAiSLAAuB04BlgPnJFk+adi3gfOBq7qqQ5I0vYUdbnsFsLWqtgEkuRo4Ddiye0BVbW9e+3GHdUiSptHloaGjgfuG2juaPknSfmReTBYnWZ1kU5JNO3fuHHc5knRA6TII7geOGWovbvpmrarWVdVEVU0sWrRoToqTJA10GQQbgWVJliY5CDgbWN/h/iRJ+6CzIKiqXcAa4CbgLuCaqtqc5JIkqwCS/FqSHcBrgA8l2dxVPZKkqXV51hBVtQHYMKnv4qHnGxkcMtKYLFl7w5xsZ/s7T52T7UgavU6DQNoXcxVOYEBJbcyLs4YkSd0xCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ5bOO4CpPlgydob5mxb29956pxsZ3+sSfNTp0GQZCXwPmAB8NdV9c5Jrx8MfAz4VeBh4LVVtb3LmiR1a64CynAanc6CIMkC4HLgZGAHsDHJ+qraMjTsDcAjVfWLSc4G3gW8tquaJPWT4TS9Lj8RrAC2VtU2gCRXA6cBw0FwGvDfm+fXAR9IkqqqDuuSpLHbnw7tpaufuUnOBFZW1R827T8ATqyqNUNj7mzG7Gja32rGPDRpW6uB1U3zl4C756jMI4GHZhw1WtbUjjW1tz/WZU3tzGVNx1XVoqlemBeTxVW1Dlg319tNsqmqJuZ6u0+FNbVjTe3tj3VZUzujqqnL00fvB44Zai9u+qYck2QhcDiDSWNJ0oh0GQQbgWVJliY5CDgbWD9pzHrg9c3zM4H/4/yAJI1WZ4eGqmpXkjXATQxOH72iqjYnuQTYVFXrgb8BPp5kK/AdBmExSnN+uGkOWFM71tTe/liXNbUzkpo6myyWJM0PLjEhST1nEEhSzxkEktRz8+I6grmS5G3A31bV5NNYx6pZc+kMYAlD/yZVdcm4atqfJHlNVV2bZGlV3bMf1PPlqjopyWPA5Em2YnDiw3uq6i9HXx0k+Rzw3qraMNS3rqpWT/NtvbS/vveS/DLwm03z5qr6ly7317dPBIcC/5Dk5iRrkjxn3AU1Ps1guY1dwA+GHmOT5PlJPpPkoSQPJvl0kuePqZyLmq+fGtP+91BVJzVfD62qwyY9DgcmgAvHWOJS4M+T/MVQ31gulEpyR5Lb9/YYR02T7I/vvQuBTwJHNY9PJHlrp/vs41lDSU5gsLjdGcCOqnr5mOu5s6peNM4aJkvyNQaLBv7vputs4K1VdeIYavlHBr9p/xpw8+TXq2rVqGuaSZLnVdW/jWnfX2ew1tdlDC7YfB3w+ap6yRhqOa55+pbm68ebr78PUFVrR13TsP30vXc78BtV9YOmfQjwT1V1Qlf77NWhoSEPAg8wuIr5qDHXAvDVJMdX1R3jLmTIs6rq40PtTyR5+5hqeZDBD7WvAO8dUw2zMq4QaKSqdgFvTnI+8GXg58dRSFXdC5Dk5Kr6laGX1jaBNdYgYP987wV4cqj9ZNPXmV4FQZI3A2cBi4BrgTdOWhZ71PXcweA33YXABUm2AT9i8I9eXf4GME1Nz26e3pjkIgafCIrBJ6gNe/3Gbr0YuA/4JnA7Hb8pDgAf3P2kqj7S/D97yzTjRyFJXlpVX2kaL2X/ODR9EnB+knsY83tvyJXALUmub9qnM7j4tjO9OjSU5H8xmCy+bdy1wB4fm6e0+7epUWreEMVPf9ju/g+y+w0y8nmCJH8M/BHwfAbrU2WoxrHUpNlJ8hIGP+AOb7q+C1xQVd8YW1Hs/T04jvfesObv66SmeXPXf0+9CgK1l+SZwJsZ/GcsBsfm/6qqfjjGmv6qqv5oXPvX7DVn6u3RNfS8qurSUdajqfXq0JBm5aPAowyOzQOcy+C2omeNqyBDYF46tPn6Swwm+z/NIAxeCfzzuIrSnvxEoCkl2VJVy2fqk9pI8iXg1Kp6rGkfCtxQVb813soE+8dkjfZPX0/y67sbSU4ENo2xHs1vzwEeH2o/3vRpP+ChIe1h6EympzM4te7bTfs44P+OszbNax8D/nnSmTAfGVs12oOHhrSH/fFMJh0YmjNhdi+b8KVxnzGknzIIJKnnnCOQpJ4zCCSp5wwCSeo5g0CSes4gkKSe+//YafSTloyeegAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAECCAYAAADzStBRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAAR+UlEQVR4nO3dfbAdd13H8fen6RMPDQV6UWhSkmKYMUJBuBSdUXmwDK1AUmjBBpFHDYLhYVDGMDjFKaJUBxygUQhQQKTGWga9QCAyCAgoNbcUkaQWQig0HaGh1LYgUlK+/nFO9HB7HzZN9tz2/t6vmTPZ/e1v93xv504/d/e3+9tUFZKkdh212AVIkhaXQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIHSX5ZJIbkxw30va4JJ9IclOSa2bZZ9Vw+38n+Y8kZ4y1aKkDg0DqIMkq4BeBAtaNbPoecDHwyjl2/WvgSuC+wKuBy5JM9FepdOjik8XSwpKcDzwRuBx4cFU9ecb2M4B3VNWqkbYHA/8OnFRVtwzbPg28r6reOq7apYUcvdgFSHcRzwbeyCAIPpfkJ6rqWwvs8zPA3oMhMPRvw3bpTsNLQ9ICkvwC8EDg0qq6Avgq8MwOu94TuGlG203ACUe2QunwGATSwp4D/ENVfXu4fsmwbSHfBZbPaFsO3DJLX2nReGlImkeSuwHPAJYl+eaw+TjgxCQPq6p/m2f3XcCpSU4YuTz0MAZBIt1peEYgze9s4DZgLfDw4eengU8Dz05yVJLjgWOAJDk+ybEAVfVl4AvAa4btTwVOA94/5p9BmpdnBNL8ngO8q6q+MdqY5CLgzcBHgI+NbPo+8CngscP184B3AzcC3wDOrar9/ZYsHRpvH5WkxnlpSJIaZxBIUuN6DYIkZya5OsmeJJvn6POMJLuT7Eri3RSSNGa9jREkWQZ8GXgCsA/YCWyoqt0jfdYAlwKPr6obk9yvqq7vpSBJ0qz6vGvodGBPVe0FSLINWA/sHunzm8CWqroRoEsInHTSSbVq1aojX60kLWFXXHHFt6tq1gkP+wyCk4FrR9b3AY+e0efBAEk+CywD/qCqPjrzQEk2AhsBTjnlFKanp3spWJKWqiRfn2vbYg8WHw2sYXDP9Qbg7UlOnNmpqrZW1WRVTU5MOIOvJB1JfQbBdcDKkfUVw7ZR+4CpqvphVX2NwZjCmh5rkiTN0GcQ7ATWJFk9fOT+PGBqRp+/Y/gEZpKTGFwq2ttjTZKkGXoLgqo6AGwCdgBXMZjCd1eSC5IcfMPTDuCGJLuBTwCvrKob+qpJknR7d7kpJiYnJ8vBYkk6NEmuqKrJ2bYt9mCxJGmRGQSS1DiDQJIaZxBIUuN8MU1PVm3+8GKXsKRc8/onLXYJ0pLlGYEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWpcr0GQ5MwkVyfZk2TzLNufm2R/ki8MP7/RZz2SpNs7uq8DJ1kGbAGeAOwDdiaZqqrdM7r+TVVt6qsOSdL8+jwjOB3YU1V7q+pWYBuwvsfvkyTdAX0GwcnAtSPr+4ZtM52T5ItJLkuycrYDJdmYZDrJ9P79+/uoVZKatdiDxR8EVlXVacDHgPfM1qmqtlbVZFVNTkxMjLVASVrq+gyC64DRv/BXDNv+T1XdUFU/GK6+A3hkj/VIkmbRZxDsBNYkWZ3kWOA8YGq0Q5L7j6yuA67qsR5J0ix6u2uoqg4k2QTsAJYBF1fVriQXANNVNQW8NMk64ADwHeC5fdUjSZpdb0EAUFXbge0z2s4fWX4V8Ko+a5AkzW+xB4slSYvMIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIa1+vL6yXd+aza/OHFLmFJueb1T1rsEg6bZwSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcb0GQZIzk1ydZE+SzfP0OydJJZnssx5J0u31FgRJlgFbgLOAtcCGJGtn6XcC8DLg8r5qkSTN7ZCCIMlRSZZ37H46sKeq9lbVrcA2YP0s/V4LXAj8z6HUIkk6MhYMgiSXJFme5B7Al4DdSV7Z4dgnA9eOrO8bto0e+xHAyqqa91HHJBuTTCeZ3r9/f4evliR11eWMYG1V3QycDXwEWA38+uF+cZKjgDcCv7NQ36raWlWTVTU5MTFxuF8tSRrRJQiOSXIMgyCYqqofAtVhv+uAlSPrK4ZtB50APAT4ZJJrgJ8DphwwlqTx6hIEbwOuAe4B/FOSBwI3d9hvJ7AmyeokxwLnAVMHN1bVTVV1UlWtqqpVwOeAdVU1fYg/gyTpMCwYBFX15qo6uap+pQa+Djyuw34HgE3ADuAq4NKq2pXkgiTrDrtySdIRseA01EmOA84BVs3of8FC+1bVdmD7jLbz5+j72IWOJ0k68rq8j+DvgZuAK4Af9FuOJGncugTBiqo6s/dKJEmLostg8T8neWjvlUiSFkWXM4JfAJ6b5GsMLg0FqKo6rdfKJElj0SUIzuq9CknSouly++jXgROBpww/Jw7bJElLQJe5hl4GvA+43/DzV0le0ndhkqTx6HJp6AXAo6vqewBJLgT+BXhLn4VJksajy11DAW4bWb9t2CZJWgK6nBG8C7g8yQeG62cD7+ytIknSWC0YBFX1xiSfZHAbKcDzqurKXquSJI3NnEGQZHlV3ZzkPgxmH71mZNt9quo7/ZcnSerbfGcElwBPZjDH0Oj7BzJcP7XHuiRJYzJnEFTVk4f/rh5fOZKkcevyHMHHu7RJku6a5hsjOB64O3BSknvz/7eMLmfGS+glSXdd840RvBB4OfAABuMEB4PgZuCifsuSJI3LfGMEbwLelOQlVeVTxJK0RHV5juAtSR4CrAWOH2n/yz4LkySNR5d3Fr8GeCyDINjOYFrqzwAGgSQtAV3mGjoX+GXgm1X1POBhwL16rUqSNDZdguD7VfUj4ECS5cD1wMp+y5IkjUuXSeemk5wIvJ3B3UPfZTANtSRpCegyWPzi4eJbk3wUWF5VX+y3LEnSuHR5sngqyTOT3KOqrjEEJGlp6TJG8AYGU1DvTnJZknOHTx1LkpaALpeGPgV8Ksky4PHAbwIXM5hqQpJ0F9fljIAkdwPOAX4LeBTwno77nZnk6iR7kmyeZftvJfn3JF9I8pkkaw+leEnS4esyRnApcBWDs4GLgAdV1Us67LcM2MLgAbS1wIZZ/kd/SVU9tKoeDvwJ8MZDK1+SdLjmvTSU5CjgC8CGqrptvr6zOB3YU1V7h8faBqwHdh/sUFU3j/S/Bz/+AhxJ0hjMe0YwfJDs6XcgBGAwVfW1I+v7mGX66iS/neSrDM4IXjrbgZJsTDKdZHr//v13oBRJ0ly6jBF8PMk5SbJw10NXVVuq6kHA7wG/P0efrVU1WVWTExMTfZQhSc3qEgQvBP4WuDXJzUluSXLzQjsB1/HjU1GsGLbNZRtwdofjSpKOoAWDoKpOqKqjquqYqlo+XO9y6+hOYE2S1UmOBc4DpkY7JFkzsvok4CuHUrwk6fB1mYY6wK8Bq6vqtUlWAvevqn+db7+qOpBkE7ADWAZcXFW7klwATFfVFLApyRnAD4Ebgecc5s8jSTpEXSad+3PgRwxuH30tg0nntjB4nmBeVbWdwTsMRtvOH1l+2aEUK0k68roEwaOr6hFJrgSoqhuHl3okSUtAl8HiHw4fDiuAJBMMzhAkSUtAlyB4M/AB4H5JXsfgNZV/1GtVkqSx6TLp3PuSXMHgdZUBzq6qq3qvTJI0Fl3mGnoQ8LWq2gJ8CXjC8I1lkqQloMulofcDtyX5KeBtDB4Su6TXqiRJY9MlCH5UVQeApwEXVdUrgfv3W5YkaVy63jW0AXg28KFh2zH9lSRJGqcuQfA84OeB11XV15KsBt7bb1mSpHHpMtfQbuB3gV1JHgpcV1UX9l6ZJGksusw19CTgrcBXGdw+ujrJC6vqI30XJ0nqX5cpJt4APK6q9sD/3U76YcAgkKQloMsYwS0HQ2BoL3BLT/VIksZszjOCJE8bLk4n2Q5cymC+oaczeNeAJGkJmO/S0FNGlr8FPGa4vB84vreKJEljNWcQVNXzxlmIJGlxdJlraEWSDyS5fvh5f5IV4yhOktS/LoPF72LwruEHDD8fHLZJkpaALkEwUVXvqqoDw8+7gYme65IkjUmXILghybOSLBt+ngXc0HdhkqTx6BIEzweeAXwT+E/gXAbzD0mSloAubyj7OrBuDLVIkhZBlzMCSdISZhBIUuMMAklqXOcgSPJzST6a5JNJzu6xJknSGM036dxPVtU3R5peATyVwTsJLgf+rt/SJEnjMN8ZwVuTnJ/k4ARz/8Xg1tGnAjd3OXiSM5NcnWRPks2zbH9Fkt1Jvpjk40keeKg/gCTp8MwZBFV1NnAl8KEkzwZeDhwH3Bc4e6EDJ1kGbAHOAtYCG5KsndHtSmCyqk4DLgP+5JB/AknSYZl3jKCqPgg8EbgX8AHgy1X15qra3+HYpwN7qmpvVd0KbAPWzzj+J6rqv4ernwOczE6SxmzOIEiyLskngI8CXwJ+FVifZNvwdZULORm4dmR937BtLi/A119K0tjN92TxHzL4q/5uwI6qOh34nSRrgNcB5x2pIobzF03y/y+/mbl9I7AR4JRTTjlSXytJYv4guAl4GnB34PqDjVX1FbqFwHXAypH1FcO2H5PkDODVwGOq6gezHaiqtgJbASYnJ6vDd0uSOppvjOCpDAaGjwaeeQeOvRNYk2R1kmMZhMfUaIckPwu8DVhXVdfPcgxJUs/me1Xlt4G33NEDV9WBJJuAHcAy4OKq2pXkAmC6qqaAPwXuCfxtEoBvVJUT3EnSGC04++jhqKrtwPYZbeePLJ/R5/dLkhbmXEOS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuN6DYIkZya5OsmeJJtn2f5LST6f5ECSc/usRZI0u96CIMkyYAtwFrAW2JBk7Yxu3wCeC1zSVx2SpPkd3eOxTwf2VNVegCTbgPXA7oMdquqa4bYf9ViHJGkefV4aOhm4dmR937BNknQncpcYLE6yMcl0kun9+/cvdjmStKT0GQTXAStH1lcM2w5ZVW2tqsmqmpyYmDgixUmSBvoMgp3AmiSrkxwLnAdM9fh9kqQ7oLcgqKoDwCZgB3AVcGlV7UpyQZJ1AEkelWQf8HTgbUl29VWPJGl2fd41RFVtB7bPaDt/ZHkng0tGkqRFcpcYLJYk9ccgkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIa12sQJDkzydVJ9iTZPMv245L8zXD75UlW9VmPJOn2eguCJMuALcBZwFpgQ5K1M7q9ALixqn4K+DPgwr7qkSTNrs8zgtOBPVW1t6puBbYB62f0WQ+8Z7h8GfDLSdJjTZKkGY7u8dgnA9eOrO8DHj1Xn6o6kOQm4L7At0c7JdkIbByufjfJ1b1U3KaTmPHf+84oniu2yN/NI+uBc23oMwiOmKraCmxd7DqWoiTTVTW52HVIM/m7OT59Xhq6Dlg5sr5i2DZrnyRHA/cCbuixJknSDH0GwU5gTZLVSY4FzgOmZvSZAp4zXD4X+Meqqh5rkiTN0NuloeE1/03ADmAZcHFV7UpyATBdVVPAO4H3JtkDfIdBWGi8vOSmOyt/N8ck/gEuSW3zyWJJapxBIEmNMwgakeS9w39ftti1SLpzMQja8cgkDwCen+TeSe4z+lns4qTk9o9mzdamI8/B4kYkeSnwIuBUBs9vjE7lUVV16qIUJg0l+XxVPWJG2xer6rTFqqkVBkFjkvxFVb1oseuQDkryIuDFDP5I+erIphOAz1bVsxalsIYYBJIWVZJ7AfcG/hgYna7+lqr6zuJU1RaDQJIa52CxJDXOIJCkxhkEktQ4g0CSGve/INem00P3tGMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for var in vars_cat:\n",
    "    data[var].value_counts(normalize=True).plot.bar()\n",
    "    plt.title(var)\n",
    "    plt.ylabel('% observations')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A2', 'A3', 'A8', 'A11', 'A14', 'A15']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# numerical variables\n",
    "\n",
    "vars_num = data.select_dtypes(exclude='O').columns.to_list()\n",
    "\n",
    "vars_num.remove('A16')\n",
    "\n",
    "vars_num.remove('date')\n",
    "\n",
    "vars_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for var in vars_num:\n",
    "    data[var].hist(bins=50)\n",
    "    plt.title(var)\n",
    "    plt.ylabel('Number observations')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PSI feature selection\n",
    "\n",
    "## Split data based on proportions\n",
    "\n",
    "DropHighPSIFeatures splits the dataset in 2, a base dataset and a comparison dataset. The comparison dataset is compared against the base dataset to determine the PSI.\n",
    "\n",
    "We may want to divide the dataset just based on **proportion of observations**. We want to have, say, 60% of observations in the base dataset. We can use the **dataframe index** to guide the split.\n",
    "\n",
    "**NOTE** that for the split, the transformer orders the variable, here the index, and then smaller values of the variable will be in the base dataset, and bigger values of the variable will go to the comparison dataset. In other words, this is not a random split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we split the data into a train and a test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data[vars_cat+vars_num],\n",
    "    data['A16'],\n",
    "    test_size=0.1,\n",
    "    random_state=42,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we set up the DropHighPSIFeatures\n",
    "\n",
    "transformer = DropHighPSIFeatures(\n",
    "    split_frac=0.6, # the proportion of obs in the base dataset\n",
    "    split_col=None, # If None, it uses the index\n",
    "    strategy = 'equal_frequency', # whether to create the bins of equal frequency\n",
    "    threshold=0.1, # the PSI threshold to drop variables\n",
    "    variables=vars_num, # the variables to analyse\n",
    "    missing_values='ignore',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DropHighPSIFeatures(missing_values='ignore', split_frac=0.6, threshold=0.1,\n",
       "                    variables=['A2', 'A3', 'A8', 'A11', 'A14', 'A15'])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we fit the transformer to the train set\n",
    "# Here, the transformer will split the data, \n",
    "# determine the PSI of each feature and identify\n",
    "# those that will be removed.\n",
    "\n",
    "transformer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "415.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the value in the index that determines the separation\n",
    "# into base and comparison datasets. \n",
    "\n",
    "# Observations whose index value is smaller than \n",
    "# the cut_off will be in the base dataset. \n",
    "# The remaining ones in the comparison data.\n",
    "\n",
    "transformer.cut_off_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the PSI threshold above which variables \n",
    "# will be removed.\n",
    "\n",
    "# We can change this when we initialize the transformer\n",
    "\n",
    "transformer.threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A2': 0.0787531730176423,\n",
       " 'A3': 0.08032153261330531,\n",
       " 'A8': 0.1919536825616741,\n",
       " 'A11': 0.04766182980880748,\n",
       " 'A14': 0.10382066854104179,\n",
       " 'A15': 0.020778411016241834}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# During fit() the transformer determines the PSI\n",
    "# values for each variable and stores it.\n",
    "\n",
    "transformer.psi_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A8', 'A14']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The variables that will be dropped:\n",
    "# those whose PSI is biggher than the threshold.\n",
    "\n",
    "transformer.features_to_drop_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand what the DropHighPSIFeatures is doing, let's split the train set manually, in the same what that the transformer is doing. Then, let's plot the distribution of the variables in each of the sub-dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A8 - moderately big PSI')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the variables distribution\n",
    "# in each of the dataset portions\n",
    "\n",
    "# create series to flag if an observation belongs to\n",
    "# the base or comparison dataframe.\n",
    "\n",
    "# Note how we use the cut_off identified by the\n",
    "# transformer\n",
    "tmp = X_train.index <= transformer.cut_off_\n",
    "\n",
    "# plot\n",
    "sns.ecdfplot(data=X_train, x='A8', hue=tmp)\n",
    "plt.title('A8 - moderately big PSI')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A2 - low PSI')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For comparison, let's plot a variable with low PSI\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A2', hue=tmp)\n",
    "plt.title('A2 - low PSI')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the cumulative distribution of A8 is different in both datasets and this is why it is flagged for removal. On the other hand, the cumulative distribution of A2 is not different in the sub-datasets.\n",
    "\n",
    "Now we can go ahead and drop the features from the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 15), (69, 15))"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print shape before dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 13), (69, 13))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = transformer.transform(X_train)\n",
    "X_test = transformer.transform(X_test)\n",
    "\n",
    "# print shape **after** dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The datasets have now 2 variables less, those that had high PSI values.\n",
    "\n",
    "## Split data based on categorical values\n",
    "\n",
    "In the previous example, we sorted the observations based on a numerical variable, the index, and then we assigned the top 60% of the observations to the base dataframe. \n",
    "\n",
    "Now, we will sort the observations based on a categorical variable, and assign the top 50% to the base dataframe.\n",
    "\n",
    "**Note** when splitting based on categorical variables the proportions achieved after the split may not match exactly the one specified.\n",
    "\n",
    "### When is this split useful?\n",
    "\n",
    "This way of splitting the data is useful when, for example, we have a variable with the customer's ID. The ID's normally increase in time, with smaller values corresponding to older customers and bigger ID values corresponding to newly acquired customers.\n",
    "\n",
    "**Our example**\n",
    "\n",
    "In our data, we have customers from different age groups. We want to know if the variable distribution in younger age groups differ from older age groups. This is a suitable case to split based on a categorical value without specifically specifying the cut_off.\n",
    "\n",
    "The transformer will sort the categories of the variable and then those with smaller category values will be in the base dataframe, and the remaining in the comparison dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we split the data into a train and a test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data[vars_cat+vars_num],\n",
    "    data['A16'],\n",
    "    test_size=0.1,\n",
    "    random_state=42,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now, we set up the transformer\n",
    "\n",
    "# Note that if we do not specify which variables to analyse, \n",
    "# the transformer will find the numerical variables automatically\n",
    "\n",
    "transformer = DropHighPSIFeatures(\n",
    "    split_frac=0.5, # percentage of observations in base df\n",
    "    split_col='A6', # the categorical variable with the age groups\n",
    "    strategy = 'equal_frequency',\n",
    "    threshold=0.1,\n",
    "    variables=None, # When None, finds numerical variables automatically\n",
    "    missing_values='ignore',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DropHighPSIFeatures(missing_values='ignore', split_col='A6', threshold=0.1)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we fit the transformer to the train set\n",
    "# Here, the transformer will split the data, \n",
    "# determine the PSI of each feature and identify\n",
    "# those that will be removed.\n",
    "\n",
    "transformer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A2', 'A3', 'A8', 'A11', 'A14', 'A15']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The transformer identified the numerical variables\n",
    "\n",
    "transformer.variables_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'45-50'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the age group under which, observations will be\n",
    "# in the base df.\n",
    "\n",
    "transformer.cut_off_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A2': 0.09038144043568247,\n",
       " 'A3': 0.07032227293449861,\n",
       " 'A8': 0.1282158612755157,\n",
       " 'A11': 0.04022018034673045,\n",
       " 'A14': 0.09903792814701158,\n",
       " 'A15': 0.021274805073497518}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The PSI values determined for each feature\n",
    "\n",
    "transformer.psi_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A8']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The variables that will be dropped.\n",
    "\n",
    "transformer.features_to_drop_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand what the DropHighPSIFeatures is doing, let's split the train set manually, in the same what that the transformer is doing. Then, let's plot the distribution of the variables in each of the sub-dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A8 - moderately big PSI')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the variables distribution\n",
    "# in each of the dataset portions\n",
    "\n",
    "# create series to flag if an observation belongs to\n",
    "# the base or comparison dataframe.\n",
    "\n",
    "# Note how we use the cut_off identified by the\n",
    "# transformer\n",
    "tmp = X_train['A6'] <= transformer.cut_off_\n",
    "\n",
    "# plot\n",
    "sns.ecdfplot(data=X_train, x='A8', hue=tmp)\n",
    "plt.title('A8 - moderately big PSI')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A15 - low PSI')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For comparison, let's plot a variable with low PSI\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A15', hue=tmp)\n",
    "plt.title('A15 - low PSI')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The difference in the cumulative distributions of these groups wasn't very obvious :/\n",
    "\n",
    "Now, let's identify which observations were assigned to each sub-dataframe by the transformer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['20-25', '25-30', '30-35', '40-45', '45-50', '35-40'], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The observations belonging to these age groups\n",
    "# were assigned to the base df.\n",
    "\n",
    "X_train[tmp]['A6'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of age groups in the base df\n",
    "\n",
    "X_train[tmp]['A6'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4106280193236715"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Proportion of observations in the base df\n",
    "\n",
    "len(X_train[tmp]['A6']) / len(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we aimed for 50% of observations in the base reference, but based on this categorical variable, the closer we could get is 41%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['60-65', '50-55', '70-75', '65-70', '75-80', '55-60', '85-90',\n",
       "       'Unknown', 'Missing'], dtype=object)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The observations belonging to these age groups\n",
    "# were assigned to the comparison df.\n",
    "\n",
    "X_train[~tmp]['A6'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of age groups in the comparison df\n",
    "\n",
    "X_train[~tmp]['A6'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5893719806763285"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Proportion of observations in the comparison df\n",
    "\n",
    "len(X_train[~tmp]['A6']) / len(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we have more age groups in the comparison df, but these groups have fewer observations, so the proportion of observations in the base and comparison dfs is the closest possible to what we wanted: 50%.\n",
    "\n",
    "Now we can go ahead and drop the features from the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 15), (69, 15))"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print shape before dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 14), (69, 14))"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = transformer.transform(X_train)\n",
    "X_test = transformer.transform(X_test)\n",
    "\n",
    "# print shape **after** dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split data based on distinct values\n",
    "\n",
    "In the previous example, we split the data using a categorical variable as guide, but ultimately, the split was done based on proportion of observations.\n",
    "\n",
    "In the extreme example where 50% of our customers belong to the age group 20-25 and the remaining 50% belong to older age groups, we would have only 1 age group in the base dataframe and all the remaining in the comparison dataframe if we split as we did in our previous example. This may result in a biased comparison.\n",
    "\n",
    "If we want to ensure that we have 50% of the possible age groups in each base and comparison dataframe, we can do so with the parameter `split_distinct`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we split the data into a train and a test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data[vars_cat+vars_num],\n",
    "    data['A16'],\n",
    "    test_size=0.1,\n",
    "    random_state=42,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "transformer = DropHighPSIFeatures(\n",
    "    split_frac=0.5, # proportion of (unique) categories in the base df\n",
    "    split_distinct=True, # we split based on unique categories\n",
    "    split_col='A6', # the categorical variable guiding the split\n",
    "    strategy = 'equal_frequency',\n",
    "    threshold=0.1,\n",
    "    missing_values='ignore',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DropHighPSIFeatures(missing_values='ignore', split_col='A6',\n",
       "                    split_distinct=True, threshold=0.1)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we fit the transformer to the train set\n",
    "# Here, the transformer will split the data, \n",
    "# determine the PSI of each feature and identify\n",
    "# those that will be removed.\n",
    "\n",
    "transformer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'55-60'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the age group under which, observations will be\n",
    "# in the base df.\n",
    "\n",
    "transformer.cut_off_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that this cut_off is different from the one we obtained previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A2': 0.1323426708225364,\n",
       " 'A3': 0.10997847648775538,\n",
       " 'A8': 0.4245269976390187,\n",
       " 'A11': 0.07282952117224366,\n",
       " 'A14': 0.0920081845120618,\n",
       " 'A15': 0.031059895072444714}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The PSI values determined for each feature\n",
    "\n",
    "transformer.psi_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A2', 'A3', 'A8']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The variables that will be dropped.\n",
    "\n",
    "transformer.features_to_drop_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand what the DropHighPSIFeatures is doing, let's split the train set manually, in the same what that the transformer is doing. Then, let's plot the distribution of the variables in each of the sub-dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A3 - moderately big PSI')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the variables distribution\n",
    "# in each of the dataset portions\n",
    "\n",
    "# create series to flag if an observation belongs to\n",
    "# the base or comparison dataframe.\n",
    "\n",
    "# Note how we use the cut_off identified by the\n",
    "# transformer\n",
    "tmp = X_train['A6'] <= transformer.cut_off_\n",
    "\n",
    "# plot\n",
    "sns.ecdfplot(data=X_train, x='A3', hue=tmp)\n",
    "plt.title('A3 - moderately big PSI')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A15 - low PSI')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For comparison, let's plot a variable with low PSI\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A15', hue=tmp)\n",
    "plt.title('A15 - low PSI')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see a difference in the distribution of the variable in the base and comparison dfs, when the PSI value is higher.\n",
    "\n",
    "Now, let's identify which observations were assigned to each sub-dataframe by the transformer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['20-25', '25-30', '30-35', '50-55', '40-45', '45-50', '55-60',\n",
       "       '35-40'], dtype=object)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The observations belonging to these age groups\n",
    "# were assigned to the base df.\n",
    "\n",
    "X_train[tmp]['A6'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of age groups in the base df\n",
    "\n",
    "X_train[tmp]['A6'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6473429951690821"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Proportion of observations in the base df\n",
    "\n",
    "len(X_train[tmp]['A6']) / len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['60-65', '70-75', '65-70', '75-80', '85-90', 'Unknown', 'Missing'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The observations belonging to these age groups\n",
    "# were assigned to the comparison df.\n",
    "\n",
    "X_train[~tmp]['A6'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The number of age groups in the comparison df\n",
    "\n",
    "X_train[~tmp]['A6'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3526570048309179"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Proportion of observations in the comparison df\n",
    "\n",
    "len(X_train[~tmp]['A6']) / len(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we have a similar proportion of age groups in the base and comparison dfs. But the proportion of observations is different.\n",
    "\n",
    "Now we can go ahead and drop the features from the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 15), (69, 15))"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print shape before dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 12), (69, 12))"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = transformer.transform(X_train)\n",
    "X_test = transformer.transform(X_test)\n",
    "\n",
    "# print shape **after** dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split based on specific categories\n",
    "\n",
    "In the previous example, the categories had an intrinsic order. What if, we want to split based on category values which do not have an intrinsic order?\n",
    "\n",
    "We can do so by specifying which category values should go to the base dataframe.\n",
    "\n",
    "This way of splitting the data is useful if we want to compare features across customers coming from different portfolios, or different sales channels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we split the data into a train and a test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data[vars_cat+vars_num],\n",
    "    data['A16'],\n",
    "    test_size=0.1,\n",
    "    random_state=42,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the transformer \n",
    "\n",
    "transformer = DropHighPSIFeatures(\n",
    "    cut_off=['portfolio_2', 'portfolio_3'], # the categories that should be in the base df\n",
    "    split_col='A13', # the categorical variable guiding the split\n",
    "    strategy = 'equal_width', # the intervals are equidistant\n",
    "    bins=5, # the number of intervals into which to sort the numerical values\n",
    "    threshold=0.1,\n",
    "    variables=vars_num,\n",
    "    missing_values='ignore',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DropHighPSIFeatures(bins=5, cut_off=['portfolio_2', 'portfolio_3'],\n",
       "                    missing_values='ignore', split_col='A13',\n",
       "                    strategy='equal_width', threshold=0.1,\n",
       "                    variables=['A2', 'A3', 'A8', 'A11', 'A14', 'A15'])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we fit the transformer to the train set\n",
    "# Here, the transformer will split the data, \n",
    "# determine the PSI of each feature and identify\n",
    "# those that will be removed.\n",
    "\n",
    "transformer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['portfolio_2', 'portfolio_3']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We specified the cut_off, so we should see\n",
    "# the portfolios here\n",
    "\n",
    "transformer.cut_off_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A2': 0.13707857211682517,\n",
       " 'A3': 0.303619276042116,\n",
       " 'A8': 0.27838798269892046,\n",
       " 'A11': 0.9122686983242587,\n",
       " 'A14': 0.2335366079238287,\n",
       " 'A15': 2.1597917735884997}"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The transformer stores the PSI values of the variables\n",
    "\n",
    "transformer.psi_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A2', 'A3', 'A8', 'A11', 'A14', 'A15']"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The variables that will be dropped.\n",
    "\n",
    "transformer.features_to_drop_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like all variables will be dropped.\n",
    "\n",
    "To understand what the DropHighPSIFeatures is doing, let's split the train set manually, in the same what that the transformer is doing. Then, let's plot the distribution of the variables in each of the sub-dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='A3', ylabel='Proportion'>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the variables distribution\n",
    "# in each of the dataset portions\n",
    "\n",
    "# create series to flag if an observation belongs to\n",
    "# the base or comparison dataframe.\n",
    "\n",
    "# Note how we use the cut_off identified by the\n",
    "# transformer\n",
    "tmp = X_train['A13'].isin(transformer.cut_off_)\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A3', hue=tmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='A11', ylabel='Proportion'>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot another variable with high PSI\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A11', hue=tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can go ahead and drop the features from the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 15), (69, 15))"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print shape before dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 9), (69, 9))"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = transformer.transform(X_train)\n",
    "X_test = transformer.transform(X_test)\n",
    "\n",
    "# print shape **after** dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split based on Date\n",
    "\n",
    "If our data had a valid timestamp, we could want to compare the distributions before and after a time point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "min   2018-01-01\n",
       "max   2019-11-21\n",
       "Name: date, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's find out which are the minimum\n",
    "# and maximum dates in our dataset\n",
    "\n",
    "data['date'].agg(['min', 'max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now, we split the data into a train and a test set\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data[vars_cat+vars_num+['date']],\n",
    "    data['A16'],\n",
    "    test_size=0.1,\n",
    "    random_state=42,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And we specify a transformer to split based\n",
    "# on dates\n",
    "\n",
    "transformer = DropHighPSIFeatures(\n",
    "    cut_off =  pd.to_datetime('2018-12-14'), # the cut_off date\n",
    "    split_col='date', # the date variable\n",
    "    strategy = 'equal_frequency',\n",
    "    bins=8,\n",
    "    threshold=0.1,\n",
    "    missing_values='ignore',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DropHighPSIFeatures(bins=8, cut_off=Timestamp('2018-12-14 00:00:00'),\n",
       "                    missing_values='ignore', split_col='date', threshold=0.1)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we fit the transformer to the train set\n",
    "# Here, the transformer will split the data, \n",
    "# determine the PSI of each feature and identify\n",
    "# those that will be removed.\n",
    "\n",
    "transformer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2018-12-14 00:00:00')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We specified the cut_off, so we should see\n",
    "# our value here\n",
    "\n",
    "transformer.cut_off_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A2': 0.042897461606348365,\n",
       " 'A3': 0.12454277821334697,\n",
       " 'A8': 0.3103787266508977,\n",
       " 'A11': 0.18886985933386097,\n",
       " 'A14': 0.031337238449971605,\n",
       " 'A15': 0.05807864506797143}"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The transformer stores the PSI values of the variables\n",
    "\n",
    "transformer.psi_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A3', 'A8', 'A11']"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The variables that will be dropped.\n",
    "\n",
    "transformer.features_to_drop_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To understand what the DropHighPSIFeatures is doing, let's split the train set manually, in the same what that the transformer is doing. Then, let's plot the distribution of the variables in each of the sub-dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'A3 - moderately big PSI')"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the variables distribution\n",
    "# in each of the dataset portions\n",
    "\n",
    "# create series to flag if an observation belongs to\n",
    "# the base or comparison dataframe.\n",
    "\n",
    "# Note how we use the cut_off identified by the\n",
    "# transformer\n",
    "tmp = X_train['date'] <= transformer.cut_off_\n",
    "\n",
    "# plot\n",
    "sns.ecdfplot(data=X_train, x='A3', hue=tmp)\n",
    "plt.title('A3 - moderately big PSI')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='A14', ylabel='Proportion'>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For comparison, let's plot a variable with low PSI\n",
    "\n",
    "sns.ecdfplot(data=X_train, x='A14', hue=tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can go ahead and drop the features from the train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 16), (69, 16))"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print shape before dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((621, 13), (69, 13))"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = transformer.transform(X_train)\n",
    "X_test = transformer.transform(X_test)\n",
    "\n",
    "# print shape **after** dropping variables\n",
    "\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That is all!\n",
    "\n",
    "I hope I gave you a good idea about how we can use this transformer to select features based on the Population Stability Index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fenotebook",
   "language": "python",
   "name": "fenotebook"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
